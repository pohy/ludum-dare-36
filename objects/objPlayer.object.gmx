<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xSpeed = 0;
ySpeed = 0;
xMove = 0;
yMove = 0;
totalSpeed = 0;

fallSpeed = 0.5;
moveSpeed = 4;
maxHorSpeed = 16;
maxVertSpeed = 16;

collisionPrecision = 1;

groundFriction = 0.75;
airFriction = 0.95;
jumpSpeed = 12;

onGround = 0;

grappleSpeed = 16;
grappleState = GRAPPLE_IDLE;
grappleMaxLen = 720;

rope = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(ord('R'))) {
    room_restart();
}
onGround = (place_meeting(x,y+1,objWalkable));
onCeiling = (place_meeting(x,y-1,objWalkable));

    
switch (grappleState) {
case GRAPPLE_IDLE:
case GRAPPLE_SHOOTING:
case GRAPPLE_DETACHING: {
    break;
    }
}

switch (grappleState) {
    case GRAPPLE_IDLE:{
    xMove = (keyboard_check(ord('D')) - keyboard_check(ord('A'))) * moveSpeed * ((onGround+0.2)/1.2);
        if (mouse_check_button(mb_right)) {
            grappleState = GRAPPLE_SHOOTING;
        }
        break;
    }
    
    case GRAPPLE_SHOOTING: {
        var mouseDir = point_direction(x, y, mouse_x, mouse_y);
        var collisionPoint = collision_line_first(x, y, x+lengthdir_x(grappleMaxLen,mouseDir), y+lengthdir_y(grappleMaxLen,mouseDir), objWalkable, false, true);
        grappleX = collisionPoint[0];
        grappleY = collisionPoint[1];
        grappleInstance = collisionPoint[2];
        
        
        
        if (grappleInstance == noone) {
            grappleState = GRAPPLE_DETACHING;
        }
        else {
            grappleState = GRAPPLE_ATTACHED;
            rope = instance_create(x,y,objGrappleRope);
        }
        break;
    }
    
    case GRAPPLE_DETACHING:{
        if (rope != noone) {
        with (rope) instance_destroy();
        rope = noone;
        }
        grappleState = GRAPPLE_IDLE;
        break;
    }
    
    case GRAPPLE_ATTACHED:{
        //xMove = 0;
        //yMove = 0;
        if (mouse_check_button_released(mb_right)) {
            grappleState = GRAPPLE_DETACHING;
        }
        var grappleDist = point_distance(x, y, grappleX, grappleY);
        //xMove = 0;
        //yMove = 0;
        //if (grappleDist &gt; 128) {
            xSpeed += clamp((grappleX - x)/200,-grappleSpeed,grappleSpeed);
            ySpeed += clamp((grappleY - y)/200,-grappleSpeed,grappleSpeed);
            
            //if (abs(xMove) &lt; 1) xMove = 0;
            //if (abs(yMove) &lt; 1) yMove = 0;

            
        //}
        xSpeed *= 0.99;
        ySpeed *= 0.99;
        break;
    }


}


xSpeed += (xMove);
ySpeed += (yMove) + fallSpeed;

if (onGround || onCeiling) {
    xSpeed *= groundFriction;
}
else {
    xSpeed *= airFriction;
}
if (onGround) {
    if (keyboard_check(ord('W'))) {
        ySpeed = -jumpSpeed;
    }
}

xSpeed = clamp(xSpeed, -maxHorSpeed, maxHorSpeed);
ySpeed = clamp(ySpeed, -maxVertSpeed, maxVertSpeed);


if (place_meeting(x+xSpeed,y,objWalkable)) {
    while (!place_meeting(x+(collisionPrecision * sign(xSpeed)), y, objWalkable)) {
        x += collisionPrecision * sign(xSpeed);
    }
    xSpeed = 0;
}
x += xSpeed;

if (place_meeting(x,y+ySpeed,objWalkable)) {
    while (!place_meeting(x, y + (collisionPrecision * sign(ySpeed)), objWalkable)) {
        y += collisionPrecision * sign(ySpeed);
    }
    ySpeed = 0;
}
y += ySpeed;

totalSpeed = point_distance(0,0,xSpeed,ySpeed);
xMove = 0;
yMove = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if (grappleState == GRAPPLE_ATTACHED) {
   // draw_line(x, y, grappleX, grappleY);
  //  draw_text(x+64, y-32, string(grappleX)+"#"+string(grappleY));
}

mouseDist = point_distance(x,y,mouse_x,mouse_y);
mouseDir = point_direction(x,y,mouse_x,mouse_y);

grapplable = collision_line_first(x,y, x+lengthdir_x(grappleMaxLen, mouseDir), y+lengthdir_y(grappleMaxLen, mouseDir), objWall, 0, 1);

if (grapplable[2] != noone) {
    grappleIndicatorAlpha = 0.5;
    grappleIndicatorX = grapplable[0];
    grappleIndicatorY = grapplable[1];
}
else {
    grappleIndicatorAlpha = 0.1;
    grappleIndicatorX = mouse_x;
    grappleIndicatorY = mouse_y;
}
draw_set_color(c_black);
draw_set_alpha(grappleIndicatorAlpha);
draw_line(x, y, grappleIndicatorX, grappleIndicatorY);
draw_circle(grappleIndicatorX, grappleIndicatorY, 8, true);
draw_circle(x, y, grappleMaxLen, true);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
